//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SendRTA.RTA {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExternalUserState", Namespace="http://schemas.datacontract.org/2004/07/Teleopti.Ccc.Rta.WebService")]
    [System.SerializableAttribute()]
    public partial class ExternalUserState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BatchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLoggedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSnapshotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SecondsInStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BatchId {
            get {
                return this.BatchIdField;
            }
            set {
                if ((this.BatchIdField.Equals(value) != true)) {
                    this.BatchIdField = value;
                    this.RaisePropertyChanged("BatchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLoggedOn {
            get {
                return this.IsLoggedOnField;
            }
            set {
                if ((this.IsLoggedOnField.Equals(value) != true)) {
                    this.IsLoggedOnField = value;
                    this.RaisePropertyChanged("IsLoggedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSnapshot {
            get {
                return this.IsSnapshotField;
            }
            set {
                if ((this.IsSnapshotField.Equals(value) != true)) {
                    this.IsSnapshotField = value;
                    this.RaisePropertyChanged("IsSnapshot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SecondsInState {
            get {
                return this.SecondsInStateField;
            }
            set {
                if ((this.SecondsInStateField.Equals(value) != true)) {
                    this.SecondsInStateField = value;
                    this.RaisePropertyChanged("SecondsInState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateCode {
            get {
                return this.StateCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.StateCodeField, value) != true)) {
                    this.StateCodeField = value;
                    this.RaisePropertyChanged("StateCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateDescription {
            get {
                return this.StateDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.StateDescriptionField, value) != true)) {
                    this.StateDescriptionField = value;
                    this.RaisePropertyChanged("StateDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserCode {
            get {
                return this.UserCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.UserCodeField, value) != true)) {
                    this.UserCodeField = value;
                    this.RaisePropertyChanged("UserCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RTA.ITeleoptiRtaService")]
    public interface ITeleoptiRtaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeleoptiRtaService/SaveExternalUserState", ReplyAction="http://tempuri.org/ITeleoptiRtaService/SaveExternalUserStateResponse")]
        int SaveExternalUserState(string authenticationKey, string userCode, string stateCode, string stateDescription, bool isLoggedOn, int secondsInState, System.DateTime timestamp, string platformTypeId, string sourceId, System.DateTime batchId, bool isSnapshot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeleoptiRtaService/SaveExternalUserState", ReplyAction="http://tempuri.org/ITeleoptiRtaService/SaveExternalUserStateResponse")]
        System.Threading.Tasks.Task<int> SaveExternalUserStateAsync(string authenticationKey, string userCode, string stateCode, string stateDescription, bool isLoggedOn, int secondsInState, System.DateTime timestamp, string platformTypeId, string sourceId, System.DateTime batchId, bool isSnapshot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeleoptiRtaService/SaveBatchExternalUserState", ReplyAction="http://tempuri.org/ITeleoptiRtaService/SaveBatchExternalUserStateResponse")]
        int SaveBatchExternalUserState(string authenticationKey, string platformTypeId, string sourceId, global::SendRTA.RTA.ExternalUserState[] externalUserStateBatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeleoptiRtaService/SaveBatchExternalUserState", ReplyAction="http://tempuri.org/ITeleoptiRtaService/SaveBatchExternalUserStateResponse")]
        System.Threading.Tasks.Task<int> SaveBatchExternalUserStateAsync(string authenticationKey, string platformTypeId, string sourceId, global::SendRTA.RTA.ExternalUserState[] externalUserStateBatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeleoptiRtaService/GetUpdatedScheduleChange", ReplyAction="http://tempuri.org/ITeleoptiRtaService/GetUpdatedScheduleChangeResponse")]
        void GetUpdatedScheduleChange(System.Guid personId, System.Guid businessUnitId, System.DateTime timestamp, string tenant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeleoptiRtaService/GetUpdatedScheduleChange", ReplyAction="http://tempuri.org/ITeleoptiRtaService/GetUpdatedScheduleChangeResponse")]
        System.Threading.Tasks.Task GetUpdatedScheduleChangeAsync(System.Guid personId, System.Guid businessUnitId, System.DateTime timestamp, string tenant);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITeleoptiRtaServiceChannel : global::SendRTA.RTA.ITeleoptiRtaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TeleoptiRtaServiceClient : System.ServiceModel.ClientBase<global::SendRTA.RTA.ITeleoptiRtaService>, global::SendRTA.RTA.ITeleoptiRtaService {
        
        public TeleoptiRtaServiceClient() {
        }
        
        public TeleoptiRtaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TeleoptiRtaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TeleoptiRtaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TeleoptiRtaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SaveExternalUserState(string authenticationKey, string userCode, string stateCode, string stateDescription, bool isLoggedOn, int secondsInState, System.DateTime timestamp, string platformTypeId, string sourceId, System.DateTime batchId, bool isSnapshot) {
            return base.Channel.SaveExternalUserState(authenticationKey, userCode, stateCode, stateDescription, isLoggedOn, secondsInState, timestamp, platformTypeId, sourceId, batchId, isSnapshot);
        }
        
        public System.Threading.Tasks.Task<int> SaveExternalUserStateAsync(string authenticationKey, string userCode, string stateCode, string stateDescription, bool isLoggedOn, int secondsInState, System.DateTime timestamp, string platformTypeId, string sourceId, System.DateTime batchId, bool isSnapshot) {
            return base.Channel.SaveExternalUserStateAsync(authenticationKey, userCode, stateCode, stateDescription, isLoggedOn, secondsInState, timestamp, platformTypeId, sourceId, batchId, isSnapshot);
        }
        
        public int SaveBatchExternalUserState(string authenticationKey, string platformTypeId, string sourceId, global::SendRTA.RTA.ExternalUserState[] externalUserStateBatch) {
            return base.Channel.SaveBatchExternalUserState(authenticationKey, platformTypeId, sourceId, externalUserStateBatch);
        }
        
        public System.Threading.Tasks.Task<int> SaveBatchExternalUserStateAsync(string authenticationKey, string platformTypeId, string sourceId, global::SendRTA.RTA.ExternalUserState[] externalUserStateBatch) {
            return base.Channel.SaveBatchExternalUserStateAsync(authenticationKey, platformTypeId, sourceId, externalUserStateBatch);
        }
        
        public void GetUpdatedScheduleChange(System.Guid personId, System.Guid businessUnitId, System.DateTime timestamp, string tenant) {
            base.Channel.GetUpdatedScheduleChange(personId, businessUnitId, timestamp, tenant);
        }
        
        public System.Threading.Tasks.Task GetUpdatedScheduleChangeAsync(System.Guid personId, System.Guid businessUnitId, System.DateTime timestamp, string tenant) {
            return base.Channel.GetUpdatedScheduleChangeAsync(personId, businessUnitId, timestamp, tenant);
        }
    }
}
